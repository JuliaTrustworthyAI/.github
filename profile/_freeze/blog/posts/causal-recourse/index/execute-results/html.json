{
  "hash": "5dfbe079ad3f3a119c776079a28b73be",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"When Causality meets Recourse\"\nsubtitle: \"Counterfactual Explanations through Structural Causal Models\"\ndate: '2024-09-17'\ndescription: |\n    This post introduces a new tool in CounterfactualExplanations.jl, enhancing the package with causal reasoning to generate counterfactual explanations.\nauthor: \n    - name: Jorge Luiz Franco \n      url: https://www.linkedin.com/in/jorgelwyz/\ncategories:\n  - counterfactuals\n  - explainable AI\n  - causality\n  - Julia\nimage: www/intro.png\nexecute:\n  eval: true\n  echo: true\nengine: julia\njulia: \n  exeflags: [\"--project=./\"]\ncode-fold: show\n---\n\n\n\n# Introduction\n\nIn recent years, the need for interpretable and explainable AI has surged, particularly in high-stakes domains. Counterfactual explanations provide a means to understand how changes to input features could alter the outcomes of machine learning models. This blog post presents a new tool in the CounterfactualExplanations.jl package, developed during my JSoC (Julia Summer of Code) project, which incorporates causal reasoning into counterfactual generation.\n\n# Project Overview\n\nThis project aimed to enhance the CounterfactualExplanations.jl package by infusing it with a robust mathematical foundation for minimal algorithmic recourse, based on the principles of causal reasoning [@karimi2021algorithmic]. \n\n## Key Contributions\n\nDuring the project, I contributed to two key repositories:\n\n1. **CounterfactualExplanations.jl**: Developed a new tool for generating counterfactual explanations using causal information. This allows users to create smarter perturbations rather than random adjustments, ultimately providing more meaningful insights.\n\n2. **CausalInference.jl**: Implemented a Structural Causal Model (SCM) structure that extracts information from data, laying the groundwork for the causal reasoning capabilities in CounterfactualExplanations.jl.\n\nThis was an amazing experience, not just experience contribute to two repositories simultaneously, but also to work with the mantainers of these repos. I learned a lot about the Julia language and the Julia community. This was possible because of the mentorship of Patrick Altmeyer (CounterfactualExplanations) and Moritz Schauer (CausalInference), who guided me throughout the project and are amazing researchers.\n\n## The `MINTGenerator`\n\nIn this project, we developed the MINTGenerator, a counterfactual generator based on the Recourse through Minimal\nIntervention (MINT) method proposed by @karimi2021algorithmic.\n\n## Description\n\nThe MINTGenerator incorporates causal reeasoning in algorithm recourse to achieve minimal interventions when generating a counterfactual explanation. In this sense, the main ideia is that just perturbating a black box model without taking into account the causal relations in the data can guide to misleading recommendations. Here we now shift to a perspective where every action/pertubation is an intervetion in the causal graph of the problem, thus the change is not made just in the intervened upon variable, but also in its childs in the causal structure. The generator utilizes a Structural Causal Model(SCM) to encode the variables in a way that causal effects are propagated and uses a generic gradient-based generator to create the search path, that is, any gradient-base generator (ECCo, REVISE, Watcher, ...) can be used with the MINT SCM encoder to generate counterfactual samples in latent space for minimal intervetions algorithm recourse.\n\nThe MINT algorithm minimizes a loss function that combines the causal constraints of the SCM and the distance between the generated counterfactual and the original input. Since we want a gradient-based generator, we need to pass the constrained optimizaiton problem into an unconstrained one and we do this by using the Lagrangian. Initially, as defined in [@karimi2021algorithmic], we aim to aim to find the minimal cost set of actions $A$ (in the form of structural interventions) that results in a counterfactual instance yielding the favorable output from $h$,\n\n$$\n\\begin{aligned}\nA^* \\in \\arg\\min_A \\text{cost}(A; \\mathbf{x}_F)\\\\\n\\textrm{s.t.} \\quad  h(\\mathbf{x}_{SCF}) \\neq h(\\mathbf{x}_F) \\; \\; \\text{,}\\\\\n\\end{aligned} \n$$\n\nwhere $\\mathbf{x}_F$ is the original input, $\\mathbf{x}_{SCF}$ is the counterfactual instance, and $h$ is the black-box model. We use the $\\mathbf{x}_{SCF}$ terminology because the counterfactual is derived from the SCM,\n\n$$\nx_{SCF_i} = \n\\begin{cases}\nx_{F_i} + \\delta_i, & \\text{if } i \\in I \\\\\nx_{F_i} + f_i(\\text{pa}_{SCF_i}) - f_i(\\text{pa}_{F_i}), & \\text{if } i \\notin I  \\; \\; \\text{,}\n\\end{cases} \n$$\n\nwhere $I$ is the set of intervened upon variables, $f_i$ is the function that generates the value of the variable $i$ given its parents, and $\\text{pa}_{SCF_i}$ and $\\text{pa}_{F_i}$ are the parents of the variable $i$ in the counterfactual and original instance, respectively. This closed formula for the decision variable $\\mathbf{x}_{SCF}$ is what makes possible to use a gradient-based generator, since with it the lagrangian is differentiable,\n\n$$\n\\mathcal{L}(A ; \\lambda) = \\text{cost}(A; \\mathbf{x}_F) + \\lambda \\left(h(\\mathbf{x}_{SCF}) - h(\\mathbf{x}_F) \\right) \\; \\; \\text{,}\n$$\n\nor in simple terms and more standard, since $\\lambda$ is constant,\n\n$$\n\\mathcal{L_{\\texttt{MINT}}}(\\mathbf{x}_{SCF}) = \\lambda \\text{cost}(\\mathbf{x}_{SCF}; \\mathbf{x}_F) + \\text{yloss}(\\mathbf{x}_{SCF},y^*) \\; \\; \\text{,}\n$$\n\nwhere $y^*$ is clearly $h(x_F)$ and $\\text{yloss}$ is : \n\n$$\n\\text{yloss}(\\mathbf{x}_{SCF}, y^*) = h \\left(\\left\\{ x_{F_i} + \\delta_i [i \\in I] + \\left(f_i(\\text{pa}_{SCF_i}) - f_i(\\text{pa}_{F_i}) \\right) [i \\notin I] \\right\\}_{i=1}^n \\right) - y^* \\; \\; \\text{.} \n$$\n\n## Implementation\n\n### `CausalInference.jl`\n\nIn terms of implementation, we need to capture the causal relations from the data, that's where `CausalInference.jl` comes in. However, before the project, the package did not have a SCM structure, in the sense that the methods just captured the topological Directed Acyclic Graph (DAG) that showed the causality ruling the data, that is, no causal structural equations were provided,\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing CausalInference\nusing CounterfactualExplanations\nusing CounterfactualExplanations.GenerativeModels\nusing Graphs\nusing GraphRecipes\nusing MultivariateStats\nusing Plots\nusing Random\nRandom.seed!(1)\nusing StatsBase\n\nN = 2000 # number of data points\n\nx = randn(N)\nv = x + randn(N)*0.25\nw = x + randn(N)*0.25\nz = v + w + randn(N)*0.25\ns = z + randn(N)*0.25\n\ndf = (x=x, v=v, w=w, z=z, s=s)\n\nest_g, score = ges(df; penalty=1.0, parallel=true)\n\nplt = graphplot(pdag2dag!(est_g), names= [String(k) for k in keys(df)], size=(500,500), nodesize=0.1, fontsize=25)\nsavefig(plt, \"www/intro.png\")\ndisplay(plt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n┌ Warning: Only one thread available\n└ @ CausalInference ~/.julia/packages/CausalInference/ozcj8/src/ges.jl:52\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"500\" height=\"500\" viewBox=\"0 0 2000 2000\">\n<defs>\n  <clipPath id=\"clip620\">\n    <rect x=\"0\" y=\"0\" width=\"2000\" height=\"2000\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip620)\" d=\"M0 2000 L2000 2000 L2000 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip621\">\n    <rect x=\"400\" y=\"199\" width=\"1401\" height=\"1401\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip620)\" d=\"M47.2441 1952.76 L1952.76 1952.76 L1952.76 47.2441 L47.2441 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip622\">\n    <rect x=\"47\" y=\"47\" width=\"1907\" height=\"1907\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"319.46,567.322 334.671,565.41 349.866,563.492 365.03,561.562 380.145,559.616 395.196,557.647 410.166,555.649 425.041,553.618 439.803,551.546 454.438,549.428 468.927,547.26 483.257,545.034 497.41,542.746 511.371,540.389 525.124,537.958 538.652,535.448 551.939,532.852 564.971,530.164 577.729,527.38 590.199,524.493 602.365,521.498 614.21,518.389 625.718,515.16 636.874,511.806 647.661,508.321 658.064,504.699 668.083,500.94 677.733,497.051 687.031,493.036 695.992,488.901 704.632,484.653 712.968,480.296 721.015,475.836 728.79,471.28 736.308,466.632 743.586,461.899 750.639,457.086 757.484,452.199 764.137,447.244 770.613,442.226 776.93,437.151 783.101,432.024 789.145,426.852 795.076,421.64 800.911,416.394 806.666,411.12 812.357,405.822 818,400.508 823.611,395.182 829.205,389.85 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"797.14,399.688 829.205,389.85 817.836,421.405 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"829.205,389.85 823.611,395.182 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"527.079,1488.89 526.41,1467.87 525.731,1446.87 525.036,1425.9 524.314,1404.97 523.559,1384.11 522.76,1363.33 521.91,1342.65 521,1322.08 520.021,1301.64 518.965,1281.34 517.823,1261.2 516.586,1241.24 515.247,1221.47 513.796,1201.91 512.224,1182.58 510.524,1163.48 508.687,1144.64 506.703,1126.08 504.565,1107.8 502.264,1089.83 499.791,1072.17 497.138,1054.86 494.296,1037.9 491.256,1021.3 488.011,1005.09 484.56,989.267 480.911,973.811 477.074,958.707 473.056,943.94 468.867,929.494 464.514,915.353 460.007,901.5 455.354,887.919 450.564,874.596 445.644,861.512 440.605,848.654 435.454,836.004 430.2,823.546 424.851,811.264 419.417,799.143 413.905,787.167 408.324,775.318 402.684,763.582 396.992,751.942 391.257,740.382 385.488,728.887 379.692,717.439 373.88,706.024 368.059,694.624 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"368.343,728.164 368.059,694.624 395.062,714.521 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"368.059,694.624 373.88,706.024 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"527.079,1488.89 542.316,1487.01 557.537,1485.13 572.725,1483.24 587.866,1481.33 602.942,1479.39 617.938,1477.43 632.839,1475.44 647.627,1473.4 662.287,1471.32 676.803,1469.18 691.159,1466.99 705.338,1464.73 719.326,1462.41 733.105,1460.01 746.66,1457.53 759.975,1454.96 773.034,1452.3 785.82,1449.55 798.319,1446.69 810.513,1443.72 822.386,1440.64 833.924,1437.43 845.109,1434.1 855.926,1430.64 866.359,1427.04 876.409,1423.3 886.09,1419.43 895.419,1415.43 904.411,1411.31 913.084,1407.08 921.452,1402.74 929.532,1398.29 937.339,1393.75 944.891,1389.11 952.202,1384.39 959.289,1379.59 966.168,1374.71 972.854,1369.76 979.365,1364.75 985.715,1359.69 991.922,1354.57 998,1349.4 1003.97,1344.2 1009.84,1338.96 1015.63,1333.69 1021.35,1328.4 1027.03,1323.09 1032.68,1317.77 1038.3,1312.44 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1006.2,1322.16 1038.3,1312.44 1026.82,1343.96 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1038.3,1312.44 1032.68,1317.77 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"935.562,319.46 936.269,340.513 936.985,361.551 937.718,382.556 938.477,403.513 939.269,424.406 940.105,445.219 940.992,465.935 941.939,486.539 942.954,507.014 944.047,527.345 945.225,547.516 946.498,567.509 947.873,587.31 949.359,606.903 950.966,626.27 952.701,645.397 954.573,664.267 956.59,682.864 958.762,701.172 961.096,719.175 963.602,736.857 966.288,754.202 969.162,771.193 972.233,787.815 975.509,804.053 978.99,819.906 982.669,835.39 986.535,850.52 990.582,865.313 994.8,879.786 999.181,893.953 1003.72,907.831 1008.4,921.436 1013.21,934.785 1018.16,947.892 1023.23,960.775 1028.4,973.449 1033.68,985.93 1039.06,998.235 1044.52,1010.38 1050.05,1022.38 1055.66,1034.25 1061.32,1046.01 1067.04,1057.67 1072.8,1069.25 1078.59,1080.77 1084.41,1092.24 1090.25,1103.68 1096.1,1115.1 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1095.78,1081.56 1096.1,1115.1 1069.08,1095.23 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1096.1,1115.1 1090.25,1103.68 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1144.86,1242.4 1154.3,1255.18 1163.74,1267.94 1173.17,1280.67 1182.6,1293.34 1192.01,1305.95 1201.41,1318.48 1210.79,1330.9 1220.16,1343.2 1229.5,1355.37 1238.82,1367.39 1248.12,1379.24 1257.38,1390.9 1266.61,1402.36 1275.81,1413.61 1284.97,1424.61 1294.09,1435.36 1303.17,1445.84 1312.2,1456.04 1321.18,1465.93 1330.11,1475.5 1338.99,1484.74 1347.82,1493.61 1356.58,1502.12 1365.29,1510.24 1373.93,1517.96 1382.5,1525.27 1391.02,1532.19 1399.48,1538.74 1407.88,1544.94 1416.22,1550.8 1424.52,1556.34 1432.77,1561.57 1440.97,1566.52 1449.13,1571.2 1457.25,1575.62 1465.34,1579.81 1473.39,1583.78 1481.4,1587.55 1489.39,1591.13 1497.35,1594.54 1505.29,1597.8 1513.2,1600.93 1521.1,1603.93 1528.98,1606.84 1536.85,1609.66 1544.71,1612.42 1552.56,1615.12 1560.4,1617.79 1568.24,1620.44 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1544.63,1596.62 1568.24,1620.44 1535.02,1625.04 \"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1568.24,1620.44 1560.4,1617.79 \"/>\n<path clip-path=\"url(#clip622)\" d=\"M466.457 567.322 L392.958 440.019 L245.962 440.019 L172.463 567.322 L245.962 694.624 L392.958 694.624 L466.457 567.322 L466.457 567.322  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"466.457,567.322 392.958,440.019 245.962,440.019 172.463,567.322 245.962,694.624 392.958,694.624 466.457,567.322 \"/>\n<path clip-path=\"url(#clip622)\" d=\"M674.076 1488.89 L600.578 1361.59 L453.581 1361.59 L380.083 1488.89 L453.581 1616.19 L600.578 1616.19 L674.076 1488.89 L674.076 1488.89  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"674.076,1488.89 600.578,1361.59 453.581,1361.59 380.083,1488.89 453.581,1616.19 600.578,1616.19 674.076,1488.89 \"/>\n<path clip-path=\"url(#clip622)\" d=\"M1082.56 319.46 L1009.06 192.157 L862.064 192.157 L788.566 319.46 L862.064 446.763 L1009.06 446.763 L1082.56 319.46 L1082.56 319.46  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1082.56,319.46 1009.06,192.157 862.064,192.157 788.566,319.46 862.064,446.763 1009.06,446.763 1082.56,319.46 \"/>\n<path clip-path=\"url(#clip622)\" d=\"M1291.86 1242.4 L1218.36 1115.1 L1071.37 1115.1 L997.868 1242.4 L1071.37 1369.71 L1218.36 1369.71 L1291.86 1242.4 L1291.86 1242.4  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1291.86,1242.4 1218.36,1115.1 1071.37,1115.1 997.868,1242.4 1071.37,1369.71 1218.36,1369.71 1291.86,1242.4 \"/>\n<path clip-path=\"url(#clip622)\" d=\"M1827.54 1680.54 L1754.04 1553.24 L1607.04 1553.24 L1533.54 1680.54 L1607.04 1807.84 L1754.04 1807.84 L1827.54 1680.54 L1827.54 1680.54  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip622)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1827.54,1680.54 1754.04,1553.24 1607.04,1553.24 1533.54,1680.54 1607.04,1807.84 1754.04,1807.84 1827.54,1680.54 \"/>\n<circle clip-path=\"url(#clip622)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"319.46\" cy=\"567.322\" r=\"2\"/>\n<circle clip-path=\"url(#clip622)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"527.079\" cy=\"1488.89\" r=\"2\"/>\n<circle clip-path=\"url(#clip622)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"935.562\" cy=\"319.46\" r=\"2\"/>\n<circle clip-path=\"url(#clip622)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1144.86\" cy=\"1242.4\" r=\"2\"/>\n<circle clip-path=\"url(#clip622)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1680.54\" cy=\"1680.54\" r=\"2\"/>\n<path clip-path=\"url(#clip620)\" d=\"M357.22 540.304 L327.924 579.728 L358.739 621.322 L343.042 621.322 L319.46 589.493 L295.878 621.322 L280.181 621.322 L311.648 578.932 L282.857 540.304 L298.555 540.304 L320.039 569.166 L341.523 540.304 L357.22 540.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M487.655 1461.87 L501.761 1461.87 L527.079 1529.87 L552.398 1461.87 L566.503 1461.87 L536.122 1542.89 L518.037 1542.89 L487.655 1461.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M881.201 292.442 L894.511 292.442 L911.148 355.665 L927.714 292.442 L943.411 292.442 L960.049 355.665 L976.614 292.442 L989.924 292.442 L968.729 373.46 L953.032 373.46 L935.598 307.054 L918.093 373.46 L902.396 373.46 L881.201 292.442 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1114.16 1215.39 L1177.38 1215.39 L1177.38 1227.54 L1127.32 1285.77 L1177.38 1285.77 L1177.38 1296.4 L1112.35 1296.4 L1112.35 1284.25 L1162.41 1226.02 L1114.16 1226.02 L1114.16 1215.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip620)\" d=\"M1707.16 1655.91 L1707.16 1668.5 Q1701.52 1665.6 1695.44 1664.16 Q1689.37 1662.71 1682.85 1662.71 Q1672.94 1662.71 1667.95 1665.75 Q1663.03 1668.79 1663.03 1674.86 Q1663.03 1679.49 1666.58 1682.17 Q1670.12 1684.77 1680.83 1687.16 L1685.39 1688.17 Q1699.56 1691.21 1705.5 1696.78 Q1711.5 1702.28 1711.5 1712.19 Q1711.5 1723.47 1702.53 1730.06 Q1693.63 1736.64 1678.01 1736.64 Q1671.5 1736.64 1664.41 1735.34 Q1657.39 1734.11 1649.58 1731.57 L1649.58 1717.83 Q1656.96 1721.66 1664.12 1723.62 Q1671.28 1725.5 1678.3 1725.5 Q1687.7 1725.5 1692.76 1722.31 Q1697.83 1719.06 1697.83 1713.2 Q1697.83 1707.78 1694.14 1704.88 Q1690.52 1701.99 1678.15 1699.31 L1673.52 1698.23 Q1661.15 1695.62 1655.66 1690.27 Q1650.16 1684.84 1650.16 1675.44 Q1650.16 1664.01 1658.26 1657.79 Q1666.36 1651.57 1681.26 1651.57 Q1688.64 1651.57 1695.15 1652.65 Q1701.66 1653.74 1707.16 1655.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n```\n:::\n:::\n\n\n\n\n\nSo, our goal was given the DAG provided by the `ges` method in the causal discovery [@chickering2003optimal], generate equations that rules each of these causal relations, represented in the DAG as directed edges. The SCM is the union of the DAG and these causal equations, that is, the SCM is a tuple $(G, \\mathbf{f})$, where $G$ is the DAG and $\\mathbf{f}$ is the set of functions that generates the value of each variable given its parents. \n\nOur solution for constructing the structural causal equations was to assume that the data was generated by a linear model, ie, the causal relations were linear. For the DAG provided in the code example we derive\n\n$$ v = \\mathcal{b}_v $$\n\n$$ x = \\mathcal{a}_{v \\to x} v + \\mathcal{b}_x $$\n\n$$ w = \\mathcal{a}_{x \\to w} x + \\mathcal{b}_w $$\n\n$$ z = \\mathcal{a}_{v \\to z} v+ \\mathcal{a}_{w \\to z} w + \\mathcal{b}_z $$\n\n$$ s = \\mathcal{a}_{z \\to s} z + \\mathcal{b}_s $$\n\nand that's the tricky thing, as we can see these causal equations are different than the ones that generated the data, but they are the ones that respect the causal system obtained from the obtained DAG. Here $\\mathcal{b}_i$ and $\\mathcal{a}_{i \\to j}$ are the intercept term and the coefficient obtained from the linear regression, respectively. To correctly solve the linear regression respecting the dependencies of the causal graph, we use `topological_sort_by_dfs` from `Graphs.jl`.\n\nNow, with the SCM structure in hand, we see that the representation could be a struct containing the DAG and the coefficients/intercepts of the causal equations, this maps exactly the tuple $(G, \\mathbf{f})$ that we defined. However, since we need these equations to be differentiable, we need to define a function that takes the SCM and returns the value of the variable given its parents and using just the coefficients and the DAG, lead to errors, because `AutoDiff` does not deal well with functions that are conditioned (`if` statements). So, we need to define a way to retrieve the system of causal equations in a smooth way and that's where the `causal_effects` matrix comes to the rescue.\n\nLet the factual vector of features be denoted as:\n\n$$\n\\mathbf{x}_F = \n\\begin{bmatrix}\nx_{F_1} \\\\\nx_{F_2} \\\\\nx_{F_3} \\\\\n\\vdots \\\\\nx_{F_n}\n\\end{bmatrix}\n$$\n\nLet the `causal_effects` matrix be:\n\n$$\n\\mathbf{C} =\n\\begin{bmatrix}\na_{11} & a_{12} & \\cdots & a_{1n} & b_1 \\\\\na_{21} & a_{22} & \\cdots & a_{2n} & b_2 \\\\\na_{31} & a_{32} & \\cdots & a_{3n} & b_3 \\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\na_{n1} & a_{n2} & \\cdots & a_{nn} & b_n \\\\\n\\end{bmatrix}\n$$\n\nHere, $a_{ij}$ represents the coefficient from the causal effect of $x_{F_j}$ on $x_{F_i}$, and $b_i$ represents the intercept term for the variable $x_{F_i}$.\n\nThe matrix multiplication of the `causal_effects` matrix with the factual vector (excluding the bias term) is given by:\n\n$$\n\\mathbf{C}_{:, 1:n} \\cdot \\mathbf{x}_F =\n\\begin{bmatrix}\na_{11} & a_{12} & \\cdots & a_{1n} \\\\\na_{21} & a_{22} & \\cdots & a_{2n} \\\\\na_{31} & a_{32} & \\cdots & a_{3n} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\na_{n1} & a_{n2} & \\cdots & a_{nn}\n\\end{bmatrix}\n\\begin{bmatrix}\nx_{F_1} \\\\\nx_{F_2} \\\\\nx_{F_3} \\\\\n\\vdots \\\\\nx_{F_n}\n\\end{bmatrix}\n$$\n\nFinally, we add the bias term:\n\n$$\n\\mathbf{x}_{SCF} = \\mathbf{C}_{:, 1:n} \\cdot \\mathbf{x}_F + \n\\begin{bmatrix}\nb_1 \\\\\nb_2 \\\\\nb_3 \\\\\n\\vdots \\\\\nb_n\n\\end{bmatrix}\n$$\n\nIn expanded form:\n\n$$\n\\mathbf{x}_{SCF_i} = a_{i1} x_{F_1} + a_{i2} x_{F_2} + \\cdots + a_{in} x_{F_n} + b_i, \\quad \\forall i = 1, 2, \\dots, n\n$$\n\nThis equation shows how each counterfactual variable $x_{SCF_i}$ is generated as a linear combination of the factual inputs $x_{F_j}$ based on the causal effects matrix, with an intercept term $b_i$ added for each variable.\n\nOne can note that the `orphan` nodes, that is, the nodes that do not have parents in the DAG, are going to be equal to the intercept term $\\mathcal{b}_\\hat{o}$. The intuition behind this is that when we do the linear regression, variables that have no causal parents are just equal to the unconditional mean of the variable, i.e, we get $x_{SCF_\\hat{o}} = \\mathbb{E}(x_\\hat{o})$. Because of this, in some cases a better understanding of the regression is needed, so the residuals are also part of the SCM structure,\n\n\n\n::: {#4 .cell execution_count=0}\n``` {.julia .cell-code}\nstruct SCM\n    variables::Vector{String}\n    coefficients::Vector{Vector{Float64}}\n    residuals::Vector{Vector{Float64}}\n    dag::DiGraph\n    causal_effects::Matrix{Float64}\nend\n```\n:::\n\n\n\n\n\n### `CounterfactualExplanations.jl` \n\nNow, we need to go into the optimization problem previously described. We seek to minimize the lagrangian function we defined where now we have a differentiable function. The standard way to implement generators in `CounterfactualExplanations.jl` is to use `AutoDiff` exactly using composable functions in the lagrangian. The definition of $\\mathcal{L_{\\texttt{MINT}}}$ is in the same shape of the the others gradient-based generators in the package, so the optimization is straightforward. However, we needed some way to pass the $x_F$ into the $x_{SCF}$ and that's where `transformer.jl` comes in. This is where `InputTransformer`s are defined in the package and in some way this is what we are doing, we are passing our factual to the \"latent\" causal space of the counterfactual. Our first step is to create a new kind of `InputTransformer` that is the SCM itself,\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nconst TypedInputTransformer = Union{\n    Type{<:StatsBase.AbstractDataTransform},\n    Type{<:MultivariateStats.AbstractDimensionalityReduction},\n    Type{<:GenerativeModels.AbstractGenerativeModel},\n    Type{<:CausalInference.SCM} # The SCM transfromer\n}\n```\n:::\n\n\n\n\n\nand then we need a way to create this transformer, that's where we \"overload\" `fit_transformer` using `CausalInferece.jl`, \n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction fit_transformer(\n    data::CounterfactualData, input_encoder::Type{<:CausalInference.SCM}; kwargs...\n)\n    t = Tables.table(transpose(data.X))\n    est_g, score = CausalInference.ges(t; penalty=1.0, parallel=true)\n    est_dag = CausalInference.pdag2dag!(est_g)\n    scm = CausalInference.estimate_equations(t, est_dag)\n    return scm\nend\n```\n:::\n\n\n\n\n... We are getting there! However, now comes the hardest part, where this is placed?\n\n\n\n\n\n# Conclusion\n\n<!-- In conclusion, this project has successfully integrated causal reasoning into the CounterfactualExplanations.jl package, providing a valuable tool for generating counterfactual explanations that are not only interpretable but also actionable. -->\n\n# References\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}