{
  "hash": "72a0783834c8c2c8385acb8b156a59f3",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"When Causality meets Recourse\"\nsubtitle: \"Counterfactual Explanations through Structural Causal Models\"\ndate: '2024-09-17'\ndescription: |\n    This post introduces a new tool in CounterfactualExplanations.jl, enhancing the package with causal reasoning to generate counterfactual explanations.\nauthor: \n    - name: Jorge Luiz Franco \n      url: https://www.linkedin.com/in/jorgelwyz/\ncategories:\n  - counterfactuals\n  - explainable AI\n  - causality\n  - Julia\nimage: www/intro.png\nexecute:\n  eval: true\n  echo: true\nengine: julia\njulia: \n  exeflags: [\"--project=./\"]\ncode-fold: show\n---\n\n\n\n# Introduction\n\nIn recent years, the need for interpretable and explainable AI has surged, particularly in high-stakes domains. Counterfactual explanations provide a means to understand how changes to input features could alter the outcomes of machine learning models. This blog post presents a new tool in the CounterfactualExplanations.jl package, developed during my JSoC (Julia Summer of Code) project, which incorporates causal reasoning into counterfactual generation.\n\n# Project Overview\n\nThis project aimed to enhance the CounterfactualExplanations.jl package by infusing it with a robust mathematical foundation for minimal algorithmic recourse, based on the principles of causal reasoning [@karimi2021algorithmic]. \n\n## Key Contributions\n\nDuring the project, I contributed to two key repositories:\n\n1. **CounterfactualExplanations.jl**: Developed a new tool for generating counterfactual explanations using causal information. This allows users to create smarter perturbations rather than random adjustments, ultimately providing more meaningful insights.\n\n2. **CausalInference.jl**: Implemented a Structural Causal Model (SCM) structure that extracts information from data, laying the groundwork for the causal reasoning capabilities in CounterfactualExplanations.jl.\n\nThis was an amazing experience, not just experience contribute to two repositories simultaneously, but also to work with the mantainers of these repos. I learned a lot about the Julia language and the Julia community. This was possible because of the mentorship of Patrick Altmeyer (CounterfactualExplanations) and Moritz Schauer (CausalInference), who guided me throughout the project and are amazing researchers.\n\n## The `MINTGenerator`\n\nIn this project, we developed the MINTGenerator, a counterfactual generator based on the Recourse through Minimal\nIntervention (MINT) method proposed by @karimi2021algorithmic.\n\n## Description\n\nThe MINTGenerator incorporates causal reeasoning in algorithm recourse to achieve minimal interventions when generating a counterfactual explanation. In this sense, the main ideia is that just perturbating a black box model without taking into account the causal relations in the data can guide to misleading recommendations. Here we now shift to a perspective where every action/pertubation is an intervetion in the causal graph of the problem, thus the change is not made just in the intervened upon variable, but also in its childs in the causal structure. The generator utilizes a Structural Causal Model(SCM) to encode the variables in a way that causal effects are propagated and uses a generic gradient-based generator to create the search path, that is, any gradient-base generator (ECCo, REVISE, Watcher, ...) can be used with the MINT SCM encoder to generate counterfactual samples in latent space for minimal intervetions algorithm recourse.\n\nThe MINT algorithm minimizes a loss function that combines the causal constraints of the SCM and the distance between the generated counterfactual and the original input. Since we want a gradient-based generator, we need to pass the constrained optimizaiton problem into an unconstrained one and we do this by using the Lagrangian. Initially, as defined in [@karimi2021algorithmic], we aim to aim to find the minimal cost set of actions $A$ (in the form of structural interventions) that results in a counterfactual instance yielding the favorable output from $h$,\n\n$$\n\\begin{aligned}\n\nA^* \\in \\arg\\min_A \\text{cost}(A; \\mathbf{x}_F)\\\\\n\\textrm{s.t.} \\quad  h(\\mathbf{x}_{SCF}) \\neq h(\\mathbf{x}_F) \\; \\; \\text{,}\\\\\n\n\\end{aligned} \n$$\n\nwhere $\\mathbf{x}_F$ is the original input, $\\mathbf{x}_{SCF}$ is the counterfactual instance, and $h$ is the black-box model. We use the $\\mathbf{x}_{SCF}$ terminology because the counterfactual is derived from the SCM,\n\n$$\nx_{SCF_i} = \n\\begin{cases}\nx_{F_i} + \\delta_i, & \\text{if } i \\in I \\\\\nx_{F_i} + f_i(\\text{pa}_{SCF_i}) - f_i(\\text{pa}_{F_i}), & \\text{if } i \\notin I  \\; \\; \\text{,}\n\\end{cases} \n$$\n\nwhere $I$ is the set of intervened upon variables, $f_i$ is the function that generates the value of the variable $i$ given its parents, and $\\text{pa}_{SCF_i}$ and $\\text{pa}_{F_i}$ are the parents of the variable $i$ in the counterfactual and original instance, respectively. This closed formula for the decision variable $\\mathbf{x}_{SCF}$ is what makes possible to use a gradient-based generator, since with it the lagrangian is differentiable,\n\n$$\n\\mathcal{L}(A ; \\lambda) = \\text{cost}(A; \\mathbf{x}_F) + \\lambda \\left(h(\\mathbf{x}_{SCF}) - h(\\mathbf{x}_F) \\right) \\; \\; \\text{,}\n$$\n\nor in simple terms and more standard, since $\\lambda$ is constant,\n\n$$\n\\mathcal{L_{\\texttt{MINT}}}(\\mathbf{x}_{SCF}) = \\lambda \\text{cost}(\\mathbf{x}_{SCF}; \\mathbf{x}_F) + \\text{yloss}(\\mathbf{x}_{SCF},y^*) \\; \\; \\text{,}\n$$\n\nwhere $y^*$ is clearly $h(x_F)$ and $\\text{yloss}$ is : \n\n$$\n\\text{yloss}(\\mathbf{x}_{SCF}, y^*) = h \\left(\\left\\{ x_{F_i} + \\delta_i [i \\in I] + \\left(f_i(\\text{pa}_{SCF_i}) - f_i(\\text{pa}_{F_i}) \\right) [i \\notin I] \\right\\}_{i=1}^n \\right) - y^* \\; \\; \\text{.} \n$$\n\n## Implementation\n\n### `CausalInference.jl`\n\nIn terms of implementation, we need to capture the causal relations from the data, that's where `CausalInference.jl` comes in. However, before the project, the package did not have a SCM structure, in the sense that the methods just captured the topological Directed Acyclic Graph (DAG) that showed the causality ruling the data, that is, no causal structural equations were provided,\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing CausalInference\nusing Plots, GraphRecipes\nusing Random\nRandom.seed!(1)\n\nN = 2000 # number of data points\n\nx = randn(N)\nv = x + randn(N)*0.25\nw = x + randn(N)*0.25\nz = v + w + randn(N)*0.25\ns = z + randn(N)*0.25\n\ndf = (x=x, v=v, w=w, z=z, s=s)\n\nest_g, score = ges(df; penalty=1.0, parallel=true)\n\nplt = graphplot(pdag2dag!(est_g), names= [String(k) for k in keys(df)], size=(500,500), nodesize=0.3)\nsavefig(plt, \"www/intro.png\")\ndisplay(plt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n┌ Warning: Only one thread available\n└ @ CausalInference ~/.julia/packages/CausalInference/ozcj8/src/ges.jl:52\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"500\" height=\"500\" viewBox=\"0 0 2000 2000\">\n<defs>\n  <clipPath id=\"clip880\">\n    <rect x=\"0\" y=\"0\" width=\"2000\" height=\"2000\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip880)\" d=\"M0 2000 L2000 2000 L2000 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip881\">\n    <rect x=\"400\" y=\"199\" width=\"1401\" height=\"1401\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip880)\" d=\"M47.2441 1952.76 L1952.76 1952.76 L1952.76 47.2441 L47.2441 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip882\">\n    <rect x=\"47\" y=\"47\" width=\"1907\" height=\"1907\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"319.46,567.322 334.498,565.524 349.522,563.72 364.517,561.902 379.469,560.064 394.364,558.198 409.187,556.298 423.925,554.356 438.562,552.367 453.086,550.323 467.48,548.218 481.732,546.044 495.826,543.794 509.749,541.462 523.486,539.042 537.023,536.525 550.346,533.906 563.44,531.177 576.291,528.332 588.884,525.364 601.206,522.265 613.243,519.029 624.978,515.65 636.4,512.12 647.493,508.432 658.243,504.58 668.651,500.565 678.73,496.391 688.494,492.067 697.959,487.599 707.137,482.995 716.044,478.26 724.694,473.402 733.1,468.427 741.278,463.343 749.242,458.156 757.005,452.873 764.583,447.501 771.989,442.047 779.238,436.518 786.344,430.92 793.321,425.261 800.184,419.546 806.946,413.784 813.623,407.981 820.229,402.143 826.777,396.278 833.283,390.393 839.76,384.494 846.223,378.588 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"813.958,387.753 846.223,378.588 834.196,409.899 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"846.223,378.588 839.76,384.494 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"527.079,1488.89 526.489,1468.08 525.889,1447.28 525.27,1426.51 524.623,1405.78 523.939,1385.11 523.208,1364.51 522.42,1343.99 521.567,1323.57 520.639,1303.26 519.626,1283.07 518.52,1263.03 517.31,1243.14 515.988,1223.41 514.544,1203.87 512.968,1184.53 511.252,1165.39 509.386,1146.47 507.361,1127.8 505.166,1109.37 502.794,1091.21 500.233,1073.33 497.476,1055.74 494.513,1038.46 491.333,1021.5 487.929,1004.88 484.301,988.588 480.456,972.618 476.405,956.955 472.158,941.586 467.722,926.496 463.109,911.67 458.326,897.097 453.384,882.76 448.293,868.647 443.06,854.743 437.696,841.034 432.21,827.507 426.612,814.148 420.91,800.942 415.115,787.875 409.235,774.935 403.28,762.106 397.26,749.374 391.183,736.727 385.059,724.149 378.898,711.627 372.709,699.146 366.501,686.694 360.284,674.256 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"360.28,707.797 360.284,674.256 387.114,694.384 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"360.284,674.256 366.501,686.694 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"527.079,1488.89 542.142,1487.13 557.191,1485.36 572.211,1483.58 587.188,1481.77 602.108,1479.94 616.957,1478.08 631.72,1476.17 646.383,1474.22 660.932,1472.21 675.353,1470.13 689.631,1467.99 703.751,1465.78 717.701,1463.48 731.465,1461.09 745.029,1458.6 758.379,1456.01 771.5,1453.31 784.379,1450.5 797.001,1447.56 809.352,1444.48 821.417,1441.27 833.183,1437.92 844.634,1434.41 855.757,1430.75 866.538,1426.92 876.977,1422.93 887.088,1418.77 896.885,1414.47 906.382,1410.02 915.594,1405.43 924.534,1400.71 933.217,1395.87 941.658,1390.91 949.87,1385.84 957.868,1380.66 965.667,1375.39 973.28,1370.03 980.721,1364.59 988.005,1359.07 995.147,1353.49 1002.16,1347.84 1009.06,1342.13 1015.86,1336.38 1022.57,1330.59 1029.21,1324.76 1035.8,1318.9 1042.34,1313.03 1048.86,1307.13 1055.35,1301.24 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.06,1310.29 1055.35,1301.24 1043.22,1332.51 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1055.35,1301.24 1048.86,1307.13 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"935.562,319.46 936.19,340.306 936.827,361.138 937.483,381.942 938.167,402.704 938.888,423.41 939.656,444.046 940.48,464.599 941.37,485.053 942.334,505.396 943.383,525.613 944.526,545.69 945.771,565.614 947.129,585.369 948.609,604.943 950.219,624.321 951.97,643.49 953.871,662.435 955.931,681.142 958.159,699.598 960.565,717.788 963.158,735.699 965.948,753.316 968.944,770.626 972.155,787.614 975.591,804.267 979.251,820.586 983.126,836.583 987.206,852.272 991.484,867.668 995.949,882.784 1000.59,897.635 1005.4,912.234 1010.37,926.596 1015.49,940.733 1020.75,954.662 1026.14,968.394 1031.66,981.945 1037.28,995.328 1043.01,1008.56 1048.83,1021.65 1054.74,1034.61 1060.72,1047.46 1066.77,1060.22 1072.87,1072.89 1079.02,1085.49 1085.21,1098.03 1091.42,1110.53 1097.66,1123.01 1103.9,1135.47 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1103.87,1101.93 1103.9,1135.47 1077.05,1115.37 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1103.9,1135.47 1097.66,1123.01 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1144.86,1242.4 1154.12,1255.08 1163.38,1267.75 1172.63,1280.38 1181.88,1292.96 1191.13,1305.48 1200.38,1317.92 1209.61,1330.27 1218.85,1342.5 1228.07,1354.61 1237.29,1366.57 1246.5,1378.38 1255.71,1390.01 1264.9,1401.45 1274.08,1412.68 1283.25,1423.69 1292.41,1434.46 1301.55,1444.98 1310.68,1455.23 1319.79,1465.19 1328.89,1474.85 1337.97,1484.19 1347.04,1493.2 1356.08,1501.85 1365.11,1510.15 1374.12,1518.06 1383.1,1525.59 1392.07,1532.75 1401.02,1539.57 1409.95,1546.05 1418.87,1552.21 1427.77,1558.07 1436.65,1563.65 1445.52,1568.95 1454.38,1574.01 1463.23,1578.82 1472.06,1583.41 1480.88,1587.79 1489.69,1591.98 1498.5,1596 1507.29,1599.86 1516.08,1603.58 1524.86,1607.16 1533.63,1610.64 1542.4,1614.02 1551.17,1617.33 1559.93,1620.56 1568.69,1623.76 1577.45,1626.92 1586.21,1630.06 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.04,1605.81 1586.21,1630.06 1552.9,1634.04 \"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1586.21,1630.06 1577.45,1626.92 \"/>\n<path clip-path=\"url(#clip882)\" d=\"M442.937 567.322 L381.199 460.387 L257.721 460.387 L195.983 567.322 L257.721 674.256 L381.199 674.256 L442.937 567.322 L442.937 567.322  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"442.937,567.322 381.199,460.387 257.721,460.387 195.983,567.322 257.721,674.256 381.199,674.256 442.937,567.322 \"/>\n<path clip-path=\"url(#clip882)\" d=\"M650.557 1488.89 L588.818 1381.96 L465.341 1381.96 L403.602 1488.89 L465.341 1595.82 L588.818 1595.82 L650.557 1488.89 L650.557 1488.89  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"650.557,1488.89 588.818,1381.96 465.341,1381.96 403.602,1488.89 465.341,1595.82 588.818,1595.82 650.557,1488.89 \"/>\n<path clip-path=\"url(#clip882)\" d=\"M1059.04 319.46 L997.301 212.526 L873.824 212.526 L812.085 319.46 L873.824 426.394 L997.301 426.394 L1059.04 319.46 L1059.04 319.46  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1059.04,319.46 997.301,212.526 873.824,212.526 812.085,319.46 873.824,426.394 997.301,426.394 1059.04,319.46 \"/>\n<path clip-path=\"url(#clip882)\" d=\"M1268.34 1242.4 L1206.6 1135.47 L1083.13 1135.47 L1021.39 1242.4 L1083.13 1349.34 L1206.6 1349.34 L1268.34 1242.4 L1268.34 1242.4  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1268.34,1242.4 1206.6,1135.47 1083.13,1135.47 1021.39,1242.4 1083.13,1349.34 1206.6,1349.34 1268.34,1242.4 \"/>\n<path clip-path=\"url(#clip882)\" d=\"M1804.02 1680.54 L1742.28 1573.61 L1618.8 1573.61 L1557.06 1680.54 L1618.8 1787.47 L1742.28 1787.47 L1804.02 1680.54 L1804.02 1680.54  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip882)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1804.02,1680.54 1742.28,1573.61 1618.8,1573.61 1557.06,1680.54 1618.8,1787.47 1742.28,1787.47 1804.02,1680.54 \"/>\n<circle clip-path=\"url(#clip882)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"319.46\" cy=\"567.322\" r=\"2\"/>\n<circle clip-path=\"url(#clip882)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"527.079\" cy=\"1488.89\" r=\"2\"/>\n<circle clip-path=\"url(#clip882)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"935.562\" cy=\"319.46\" r=\"2\"/>\n<circle clip-path=\"url(#clip882)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1144.86\" cy=\"1242.4\" r=\"2\"/>\n<circle clip-path=\"url(#clip882)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1680.54\" cy=\"1680.54\" r=\"2\"/>\n<path clip-path=\"url(#clip880)\" d=\"M330.033 559.757 L321.83 570.795 L330.458 582.442 L326.063 582.442 L319.46 573.53 L312.857 582.442 L308.462 582.442 L317.273 570.572 L309.211 559.757 L313.607 559.757 L319.622 567.838 L325.638 559.757 L330.033 559.757 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M516.041 1481.32 L519.99 1481.32 L527.079 1500.36 L534.168 1481.32 L538.118 1481.32 L529.611 1504.01 L524.548 1504.01 L516.041 1481.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M920.341 311.895 L924.068 311.895 L928.726 329.597 L933.365 311.895 L937.76 311.895 L942.418 329.597 L947.057 311.895 L950.784 311.895 L944.849 334.58 L940.454 334.58 L935.572 315.986 L930.671 334.58 L926.276 334.58 L920.341 311.895 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1136.27 1234.84 L1153.97 1234.84 L1153.97 1238.24 L1139.95 1254.55 L1153.97 1254.55 L1153.97 1257.52 L1135.76 1257.52 L1135.76 1254.12 L1149.78 1237.82 L1136.27 1237.82 L1136.27 1234.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip880)\" d=\"M1687.99 1673.64 L1687.99 1677.17 Q1686.41 1676.36 1684.71 1675.95 Q1683.01 1675.55 1681.19 1675.55 Q1678.41 1675.55 1677.02 1676.4 Q1675.64 1677.25 1675.64 1678.95 Q1675.64 1680.25 1676.63 1681 Q1677.62 1681.72 1680.62 1682.39 L1681.9 1682.68 Q1685.87 1683.53 1687.53 1685.09 Q1689.21 1686.63 1689.21 1689.4 Q1689.21 1692.56 1686.7 1694.4 Q1684.21 1696.25 1679.83 1696.25 Q1678.01 1696.25 1676.02 1695.88 Q1674.06 1695.54 1671.87 1694.83 L1671.87 1690.98 Q1673.94 1692.05 1675.94 1692.6 Q1677.95 1693.13 1679.91 1693.13 Q1682.55 1693.13 1683.96 1692.24 Q1685.38 1691.33 1685.38 1689.68 Q1685.38 1688.17 1684.35 1687.36 Q1683.34 1686.55 1679.87 1685.8 L1678.58 1685.49 Q1675.11 1684.76 1673.57 1683.26 Q1672.03 1681.75 1672.03 1679.11 Q1672.03 1675.91 1674.3 1674.17 Q1676.57 1672.43 1680.74 1672.43 Q1682.81 1672.43 1684.63 1672.73 Q1686.45 1673.04 1687.99 1673.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n```\n:::\n:::\n\n\n\n\n\nSo, our goal was given the DAG provided by the `ges` method in the causal discovery [@chickering2003optimal], generate equations that rules each of these causal relations, represented in the DAG as directed edges. The SCM is the union of the DAG and these causal equations, that is, the SCM is a tuple $(G, \\mathbf{f})$, where $G$ is the DAG and $\\mathbf{f}$ is the set of functions that generates the value of each variable given its parents. \n\nOur solution for constructing the structural causal equations was to assume that the data was generated by a linear model, ie, the causal relations were linear. For the DAG provided in the code example we derive\n\n$$ v = \\mathcal{b}_v $$\n\n$$ x = \\mathcal{a}_{v \\to x} v + \\mathcal{b}_x $$\n\n$$ w = \\mathcal{a}_{x \\to w} x + \\mathcal{b}_w $$\n\n$$ z = \\mathcal{a}_{v \\to z} v+ \\mathcal{a}_{w \\to z} w + \\mathcal{b}_z $$\n\n$$ s = \\mathcal{a}_{z \\to s} z + \\mathcal{b}_s $$\n\nand that's the tricky thing, as we can see these causal equations are different than the ones that generated the data, but they are the ones that respect the causal system obtained from the obtained DAG. Here $\\mathcal{b}_i$ and $\\mathcal{a}_{i \\to j}$ are the intercept term and the coefficient obtained from the linear regression, respectively. To correctly solve the linear regression respecting the dependencies of the causal graph, we use `topological_sort_by_dfs` from `Graphs.jl`.\n\nNow, with the SCM structure in hand, we see that the representation could be a struct containing the DAG and the coefficients/intercepts of the causal equations, this maps exactly the tuple $(G, \\mathbf{f})$ that we defined. However, since we need these equations to be differentiable, we need to define a function that takes the SCM and returns the value of the variable given its parents and using just the coefficients and the DAG, lead to errors, because `AutoDiff` does not deal well with functions that are conditioned (`if` statements). So, we need to define a way to retrieve the system of causal equations in a smooth way and that's where the `causal_effects` matrix comes to the rescue.\n\nLet the factual vector of features be denoted as:\n\n$$\n\\mathbf{x}_F = \n\\begin{bmatrix}\nx_{F_1} \\\\\nx_{F_2} \\\\\nx_{F_3} \\\\\n\\vdots \\\\\nx_{F_n}\n\\end{bmatrix}\n$$\n\nLet the `causal_effects` matrix be:\n\n$$\n\\mathbf{C} =\n\\begin{bmatrix}\na_{11} & a_{12} & \\cdots & a_{1n} & b_1 \\\\\na_{21} & a_{22} & \\cdots & a_{2n} & b_2 \\\\\na_{31} & a_{32} & \\cdots & a_{3n} & b_3 \\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\na_{n1} & a_{n2} & \\cdots & a_{nn} & b_n \\\\\n\\end{bmatrix}\n$$\n\nHere, $a_{ij}$ represents the coefficient from the causal effect of $x_{F_j}$ on $x_{F_i}$, and $b_i$ represents the intercept term for the variable $x_{F_i}$.\n\nThe matrix multiplication of the `causal_effects` matrix with the factual vector (excluding the bias term) is given by:\n\n$$\n\\mathbf{C}_{:, 1:n} \\cdot \\mathbf{x}_F =\n\\begin{bmatrix}\na_{11} & a_{12} & \\cdots & a_{1n} \\\\\na_{21} & a_{22} & \\cdots & a_{2n} \\\\\na_{31} & a_{32} & \\cdots & a_{3n} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\na_{n1} & a_{n2} & \\cdots & a_{nn}\n\\end{bmatrix}\n\\begin{bmatrix}\nx_{F_1} \\\\\nx_{F_2} \\\\\nx_{F_3} \\\\\n\\vdots \\\\\nx_{F_n}\n\\end{bmatrix}\n$$\n\nFinally, we add the bias term:\n\n$$\n\\mathbf{x}_{SCF} = \\mathbf{C}_{:, 1:n} \\cdot \\mathbf{x}_F + \n\\begin{bmatrix}\nb_1 \\\\\nb_2 \\\\\nb_3 \\\\\n\\vdots \\\\\nb_n\n\\end{bmatrix}\n$$\n\nIn expanded form:\n\n$$\n\\mathbf{x}_{SCF_i} = a_{i1} x_{F_1} + a_{i2} x_{F_2} + \\cdots + a_{in} x_{F_n} + b_i, \\quad \\forall i = 1, 2, \\dots, n\n$$\n\nThis equation shows how each counterfactual variable $x_{SCF_i}$ is generated as a linear combination of the factual inputs $x_{F_j}$ based on the causal effects matrix, with an intercept term $b_i$ added for each variable.\n\nOne can note that the `orphan` nodes, that is, the nodes that do not have parents in the DAG, are going to be equal to the intercept term $\\mathcal{b}_\\hat{o}$. The intuition behind this is that when we do the linear regression, variables that have no causal parents are just equal to the unconditional mean of the variable, i.e, we get $x_{SCF_\\hat{o}} = \\mathbb{E}(x_\\hat{o})$. Because of this, in some cases a better understanding of the regression is needed, so the residuals are also part of the SCM structure,\n\n\n\n::: {#4 .cell execution_count=0}\n``` {.julia .cell-code}\nstruct SCM\n    variables::Vector{String}\n    coefficients::Vector{Vector{Float64}}\n    residuals::Vector{Vector{Float64}}\n    dag::DiGraph\n    causal_effects::Matrix{Float64}\nend\n```\n:::\n\n\n\n\n\n### `CounterfactualExplanations.jl` \n\n\n# Conclusion\n\n<!-- In conclusion, this project has successfully integrated causal reasoning into the CounterfactualExplanations.jl package, providing a valuable tool for generating counterfactual explanations that are not only interpretable but also actionable. -->\n\n# References\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}