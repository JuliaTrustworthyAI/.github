{
  "hash": "cc0cc232d9ce1a91f7c42084f0162fdc",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"When Causality meets Recourse\"\nsubtitle: \"Counterfactual Explanations through Structural Causal Models\"\ndate: '2024-09-17'\ndescription: |\n    This post introduces a new tool in CounterfactualExplanations.jl, enhancing the package with causal reasoning to generate counterfactual explanations.\nauthor: \n    - name: Jorge Luiz Franco \n      url: https://www.linkedin.com/in/jorgelwyz/\ncategories:\n  - counterfactuals\n  - explainable AI\n  - causality\n  - Julia\nimage: www/intro.png\nexecute:\n  eval: true\n  echo: true\nengine: julia\njulia: \n  exeflags: [\"--project=./\"]\ncode-fold: show\n---\n\n\n\n# Introduction\n\nIn recent years, the need for interpretable and explainable AI has surged, particularly in high-stakes domains. Counterfactual explanations provide a means to understand how changes to input features could alter the outcomes of machine learning models. This blog post presents a new tool in the CounterfactualExplanations.jl package, developed during my JSoC (Julia Summer of Code) project, which incorporates causal reasoning into counterfactual generation.\n\n# Project Overview\n\nThis project aimed to enhance the CounterfactualExplanations.jl package by infusing it with a robust mathematical foundation for minimal algorithmic recourse, based on the principles of causal reasoning [@karimi2021algorithmic]. \n\n## Key Contributions\n\nDuring the project, I contributed to two key repositories:\n\n1. **CounterfactualExplanations.jl**: Developed a new tool for generating counterfactual explanations using causal information. This allows users to create smarter perturbations rather than random adjustments, ultimately providing more meaningful insights.\n\n2. **CausalInference.jl**: Implemented a Structural Causal Model (SCM) structure that extracts information from data, laying the groundwork for the causal reasoning capabilities in CounterfactualExplanations.jl.\n\nThis was an amazing experience, not just experience contribute to two repositories simultaneously, but also to work with the mantainers of these repos. I learned a lot about the Julia language and the Julia community. This was possible because of the mentorship of Patrick Altmeyer (CounterfactualExplanations) and Moritz Schauer (CausalInference), who guided me throughout the project and are amazing researchers.\n\n## The `MINTGenerator`\n\nIn this project, we developed the MINTGenerator, a counterfactual generator based on the Recourse through Minimal\nIntervention (MINT) method proposed by @karimi2021algorithmic.\n\n## Description\n\nThe MINTGenerator incorporates causal reeasoning in algorithm recourse to achieve minimal interventions when generating a counterfactual explanation. In this sense, the main ideia is that just perturbating a black box model without taking into account the causal relations in the data can guide to misleading recommendations. Here we now shift to a perspective where every action/pertubation is an intervetion in the causal graph of the problem, thus the change is not made just in the intervened upon variable, but also in its childs in the causal structure. The generator utilizes a Structural Causal Model(SCM) to encode the variables in a way that causal effects are propagated and uses a generic gradient-based generator to create the search path, that is, any gradient-base generator (ECCo, REVISE, Watcher, ...) can be used with the MINT SCM encoder to generate counterfactual samples in latent space for minimal intervetions algorithm recourse.\n\nThe MINT algorithm minimizes a loss function that combines the causal constraints of the SCM and the distance between the generated counterfactual and the original input. Since we want a gradient-based generator, we need to pass the constrained optimizaiton problem into an unconstrained one and we do this by using the Lagrangian. Initially, as defined in [@karimi2021algorithmic], we aim to aim to find the minimal cost set of actions $A$ (in the form of structural interventions) that results in a counterfactual instance yielding the favorable output from $h$,\n\n$$\n\\begin{aligned}\n\nA^* \\in \\arg\\min_A \\text{cost}(A; \\mathbf{x}_F)\\\\\n\\textrm{s.t.} \\quad  h(\\mathbf{x}_{SCF}) \\neq h(\\mathbf{x}_F) \\; \\; \\text{,}\\\\\n\n\\end{aligned} \n$$\n\nwhere $\\mathbf{x}_F$ is the original input, $\\mathbf{x}_{SCF}$ is the counterfactual instance, and $h$ is the black-box model. We use the $\\mathbf{x}_{SCF}$ terminology because the counterfactual is derived from the SCM,\n\n$$\nx_{SCF_i} = \n\\begin{cases}\nx_{F_i} + \\delta_i, & \\text{if } i \\in I \\\\\nx_{F_i} + f_i(\\text{pa}_{SCF_i}) - f_i(\\text{pa}_{F_i}), & \\text{if } i \\notin I  \\; \\; \\text{,}\n\\end{cases} \n$$\n\nwhere $I$ is the set of intervened upon variables, $f_i$ is the function that generates the value of the variable $i$ given its parents, and $\\text{pa}_{SCF_i}$ and $\\text{pa}_{F_i}$ are the parents of the variable $i$ in the counterfactual and original instance, respectively. This closed formula for the decision variable $\\mathbf{x}_{SCF}$ is what makes possible to use a gradient-based generator, since with it the lagrangian is differentiable,\n\n$$\n\\mathcal{L}(A ; \\lambda) = \\text{cost}(A; \\mathbf{x}_F) + \\lambda \\left(h(\\mathbf{x}_{SCF}) - h(\\mathbf{x}_F) \\right) \\; \\; \\text{,}\n$$\n\nor in simple terms and more standard, since $\\lambda$ is constant,\n\n$$\n\\mathcal{L_{\\texttt{MINT}}}(\\mathbf{x}_{SCF}) = \\lambda \\text{cost}(\\mathbf{x}_{SCF}; \\mathbf{x}_F) + \\text{yloss}(\\mathbf{x}_{SCF},y^*) \\; \\; \\text{,}\n$$\n\nwhere $y^*$ is clearly $h(x_F)$ and $\\text{yloss}$ is : \n\n$$\n\\text{yloss}(\\mathbf{x}_{SCF}, y^*) = h \\left(\\left\\{ x_{F_i} + \\delta_i [i \\in I] + \\left(f_i(\\text{pa}_{SCF_i}) - f_i(\\text{pa}_{F_i}) \\right) [i \\notin I] \\right\\}_{i=1}^n \\right) - y^* \\; \\; \\text{.} \n$$\n\n## Implementation\n\n### `CausalInference.jl`\n\nIn terms of implementation, we need to capture the causal relations from the data, that's where `CausalInference.jl` comes in. However, before the project, the package did not have a SCM structure, in the sense that the methods just captured the topological Directed Acyclic Graph (DAG) that showed the causality ruling the data, that is, no causal structural equations were provided,\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing CausalInference\nusing Plots, GraphRecipes\nusing Random\nRandom.seed!(1)\n\nN = 2000 # number of data points\n\nx = randn(N)\nv = x + randn(N)*0.25\nw = x + randn(N)*0.25\nz = v + w + randn(N)*0.25\ns = z + randn(N)*0.25\n\ndf = (x=x, v=v, w=w, z=z, s=s)\n\nest_g, score = ges(df; penalty=1.0, parallel=true)\n\nplt = graphplot(pdag2dag!(est_g), names= [String(k) for k in keys(df)], size=(500,500), nodesize=0.1, fontsize=2)\nsavefig(plt, \"www/intro.png\")\ndisplay(plt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n┌ Warning: Only one thread available\n└ @ CausalInference ~/.julia/packages/CausalInference/ozcj8/src/ges.jl:52\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"500\" height=\"500\" viewBox=\"0 0 2000 2000\">\n<defs>\n  <clipPath id=\"clip350\">\n    <rect x=\"0\" y=\"0\" width=\"2000\" height=\"2000\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip350)\" d=\"M0 2000 L2000 2000 L2000 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip351\">\n    <rect x=\"400\" y=\"199\" width=\"1401\" height=\"1401\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip350)\" d=\"M47.2441 1952.76 L1952.76 1952.76 L1952.76 47.2441 L47.2441 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip352\">\n    <rect x=\"47\" y=\"47\" width=\"1907\" height=\"1907\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"319.46,567.322 333.675,566.069 347.883,564.804 362.079,563.515 376.257,562.189 390.411,560.813 404.535,559.376 418.622,557.866 432.667,556.269 446.664,554.573 460.606,552.767 474.488,550.838 488.303,548.773 502.046,546.561 515.71,544.189 529.289,541.644 542.777,538.915 556.169,535.989 569.458,532.854 582.638,529.498 595.703,525.907 608.647,522.071 621.464,517.976 634.148,513.61 646.693,508.961 659.093,504.018 671.348,498.78 683.464,493.258 695.446,487.466 707.302,481.416 719.037,475.119 730.656,468.589 742.167,461.837 753.575,454.876 764.887,447.718 776.107,440.376 787.243,432.861 798.3,425.186 809.285,417.364 820.203,409.406 831.06,401.325 841.863,393.134 852.618,384.844 863.33,376.468 874.006,368.018 884.652,359.506 895.274,350.946 905.877,342.348 916.468,333.726 927.054,325.091 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"894.326,332.431 927.054,325.091 913.288,355.677 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"927.054,325.091 916.468,333.726 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"527.079,1488.89 526.865,1469.06 526.638,1449.24 526.384,1429.43 526.091,1409.62 525.745,1389.84 525.333,1370.07 524.843,1350.33 524.261,1330.62 523.573,1310.94 522.767,1291.3 521.83,1271.7 520.748,1252.14 519.508,1232.63 518.097,1213.18 516.503,1193.78 514.711,1174.45 512.709,1155.18 510.483,1135.98 508.02,1116.85 505.308,1097.8 502.333,1078.83 499.082,1059.95 495.541,1041.16 491.699,1022.46 487.541,1003.86 483.068,985.36 478.293,966.952 473.229,948.634 467.888,930.403 462.285,912.253 456.432,894.18 450.342,876.182 444.029,858.253 437.505,840.389 430.784,822.587 423.879,804.842 416.803,787.15 409.57,769.507 402.191,751.909 394.682,734.352 387.054,716.832 379.321,699.345 371.495,681.886 363.591,664.452 355.622,647.038 347.599,629.641 339.537,612.256 331.449,594.879 323.348,577.506 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"322.432,611.034 323.348,577.506 349.621,598.356 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"323.348,577.506 331.449,594.879 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"527.079,1488.89 541.317,1487.67 555.549,1486.44 569.769,1485.18 583.971,1483.89 598.148,1482.55 612.296,1481.14 626.408,1479.66 640.477,1478.1 654.499,1476.43 668.466,1474.66 682.373,1472.76 696.214,1470.73 709.983,1468.55 723.673,1466.21 737.28,1463.69 750.796,1461 764.216,1458.1 777.533,1455 790.743,1451.67 803.838,1448.11 816.813,1444.3 829.662,1440.23 842.378,1435.9 854.956,1431.28 867.39,1426.36 879.68,1421.15 891.831,1415.65 903.85,1409.89 915.743,1403.86 927.516,1397.59 939.174,1391.09 950.724,1384.36 962.172,1377.42 973.523,1370.29 984.785,1362.97 995.962,1355.48 1007.06,1347.83 1018.09,1340.03 1029.05,1332.1 1039.95,1324.04 1050.8,1315.87 1061.59,1307.6 1072.35,1299.25 1083.07,1290.82 1093.76,1282.33 1104.43,1273.8 1115.07,1265.22 1125.71,1256.62 1136.34,1248.01 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1103.59,1255.24 1136.34,1248.01 1122.47,1278.55 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1136.34,1248.01 1125.71,1256.62 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"935.562,319.46 935.812,339.32 936.076,359.177 936.365,379.025 936.694,398.86 937.076,418.679 937.523,438.478 938.049,458.252 938.667,477.997 939.39,497.71 940.231,517.385 941.204,537.02 942.322,556.609 943.597,576.148 945.043,595.635 946.673,615.064 948.5,634.431 950.537,653.732 952.797,672.964 955.295,692.122 958.042,711.201 961.051,730.199 964.337,749.11 967.912,767.931 971.789,786.657 975.981,805.284 980.487,823.814 985.296,842.249 990.394,860.593 995.768,878.851 1001.41,897.027 1007.29,915.125 1013.41,933.149 1019.76,951.103 1026.32,968.991 1033.07,986.818 1040.01,1004.59 1047.12,1022.3 1054.38,1039.97 1061.8,1057.59 1069.34,1075.17 1077,1092.71 1084.76,1110.22 1092.62,1127.71 1100.56,1145.16 1108.56,1162.6 1116.61,1180.02 1124.71,1197.43 1132.83,1214.82 1140.96,1232.22 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1141.84,1198.69 1140.96,1232.22 1114.67,1211.4 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1140.96,1232.22 1132.83,1214.82 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1144.86,1242.4 1153.25,1254.62 1161.65,1266.82 1170.06,1279 1178.49,1291.15 1186.96,1303.25 1195.46,1315.29 1204.02,1327.27 1212.62,1339.17 1221.29,1350.98 1230.04,1362.69 1238.86,1374.29 1247.76,1385.76 1256.76,1397.1 1265.87,1408.29 1275.08,1419.32 1284.41,1430.19 1293.87,1440.87 1303.46,1451.37 1313.2,1461.66 1323.08,1471.74 1333.12,1481.59 1343.33,1491.21 1353.71,1500.58 1364.27,1509.69 1375.01,1518.54 1385.95,1527.11 1397.07,1535.43 1408.36,1543.5 1419.82,1551.33 1431.43,1558.94 1443.2,1566.33 1455.1,1573.52 1467.14,1580.52 1479.31,1587.35 1491.59,1594 1503.99,1600.49 1516.48,1606.84 1529.07,1613.06 1541.75,1619.15 1554.51,1625.13 1567.33,1631 1580.22,1636.79 1593.17,1642.5 1606.16,1648.14 1619.19,1653.73 1632.26,1659.27 1645.34,1664.78 1658.45,1670.26 1671.56,1675.73 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.65,1650.33 1671.56,1675.73 1638.09,1678.02 \"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1671.56,1675.73 1658.45,1670.26 \"/>\n<path clip-path=\"url(#clip352)\" d=\"M331.22 567.322 L325.34 557.137 L313.58 557.137 L307.7 567.322 L313.58 577.506 L325.34 577.506 L331.22 567.322 L331.22 567.322  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"331.22,567.322 325.34,557.137 313.58,557.137 307.7,567.322 313.58,577.506 325.34,577.506 331.22,567.322 \"/>\n<path clip-path=\"url(#clip352)\" d=\"M538.839 1488.89 L532.959 1478.71 L521.2 1478.71 L515.32 1488.89 L521.2 1499.07 L532.959 1499.07 L538.839 1488.89 L538.839 1488.89  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"538.839,1488.89 532.959,1478.71 521.2,1478.71 515.32,1488.89 521.2,1499.07 532.959,1499.07 538.839,1488.89 \"/>\n<path clip-path=\"url(#clip352)\" d=\"M947.322 319.46 L941.442 309.276 L929.682 309.276 L923.803 319.46 L929.682 329.644 L941.442 329.644 L947.322 319.46 L947.322 319.46  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"947.322,319.46 941.442,309.276 929.682,309.276 923.803,319.46 929.682,329.644 941.442,329.644 947.322,319.46 \"/>\n<path clip-path=\"url(#clip352)\" d=\"M1156.62 1242.4 L1150.74 1232.22 L1138.98 1232.22 L1133.1 1242.4 L1138.98 1252.59 L1150.74 1252.59 L1156.62 1242.4 L1156.62 1242.4  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1156.62,1242.4 1150.74,1232.22 1138.98,1232.22 1133.1,1242.4 1138.98,1252.59 1150.74,1252.59 1156.62,1242.4 \"/>\n<path clip-path=\"url(#clip352)\" d=\"M1692.3 1680.54 L1686.42 1670.36 L1674.66 1670.36 L1668.78 1680.54 L1674.66 1690.72 L1686.42 1690.72 L1692.3 1680.54 L1692.3 1680.54  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip352)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1692.3,1680.54 1686.42,1670.36 1674.66,1670.36 1668.78,1680.54 1674.66,1690.72 1686.42,1690.72 1692.3,1680.54 \"/>\n<circle clip-path=\"url(#clip352)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"319.46\" cy=\"567.322\" r=\"2\"/>\n<circle clip-path=\"url(#clip352)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"527.079\" cy=\"1488.89\" r=\"2\"/>\n<circle clip-path=\"url(#clip352)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"935.562\" cy=\"319.46\" r=\"2\"/>\n<circle clip-path=\"url(#clip352)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1144.86\" cy=\"1242.4\" r=\"2\"/>\n<circle clip-path=\"url(#clip352)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1680.54\" cy=\"1680.54\" r=\"2\"/>\n<path clip-path=\"url(#clip350)\" d=\"M322.481 565.16 L320.137 568.314 L322.602 571.642 L321.347 571.642 L319.46 569.095 L317.574 571.642 L316.318 571.642 L318.835 568.25 L316.532 565.16 L317.788 565.16 L319.506 567.469 L321.225 565.16 L322.481 565.16 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip350)\" d=\"M523.925 1486.73 L525.054 1486.73 L527.079 1492.17 L529.105 1486.73 L530.233 1486.73 L527.803 1493.21 L526.356 1493.21 L523.925 1486.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip350)\" d=\"M931.213 317.299 L932.278 317.299 L933.609 322.356 L934.934 317.299 L936.19 317.299 L937.521 322.356 L938.846 317.299 L939.911 317.299 L938.216 323.78 L936.96 323.78 L935.565 318.468 L934.165 323.78 L932.909 323.78 L931.213 317.299 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip350)\" d=\"M1142.41 1240.24 L1147.47 1240.24 L1147.47 1241.22 L1143.46 1245.87 L1147.47 1245.87 L1147.47 1246.72 L1142.26 1246.72 L1142.26 1245.75 L1146.27 1241.09 L1142.41 1241.09 L1142.41 1240.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip350)\" d=\"M1682.67 1678.57 L1682.67 1679.58 Q1682.22 1679.34 1681.73 1679.23 Q1681.25 1679.11 1680.73 1679.11 Q1679.93 1679.11 1679.53 1679.36 Q1679.14 1679.6 1679.14 1680.09 Q1679.14 1680.46 1679.42 1680.67 Q1679.71 1680.88 1680.56 1681.07 L1680.93 1681.15 Q1682.06 1681.39 1682.54 1681.84 Q1683.02 1682.28 1683.02 1683.07 Q1683.02 1683.97 1682.3 1684.5 Q1681.59 1685.03 1680.34 1685.03 Q1679.82 1685.03 1679.25 1684.92 Q1678.69 1684.83 1678.06 1684.62 L1678.06 1683.52 Q1678.65 1683.83 1679.23 1683.99 Q1679.8 1684.14 1680.36 1684.14 Q1681.11 1684.14 1681.52 1683.88 Q1681.92 1683.62 1681.92 1683.15 Q1681.92 1682.72 1681.63 1682.49 Q1681.34 1682.26 1680.35 1682.04 L1679.98 1681.95 Q1678.99 1681.75 1678.55 1681.32 Q1678.11 1680.88 1678.11 1680.13 Q1678.11 1679.22 1678.76 1678.72 Q1679.41 1678.22 1680.6 1678.22 Q1681.19 1678.22 1681.71 1678.31 Q1682.23 1678.4 1682.67 1678.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n```\n:::\n:::\n\n\n\n\n\nSo, our goal was given the DAG provided by the `ges` method in the causal discovery [@chickering2003optimal], generate equations that rules each of these causal relations, represented in the DAG as directed edges. The SCM is the union of the DAG and these causal equations, that is, the SCM is a tuple $(G, \\mathbf{f})$, where $G$ is the DAG and $\\mathbf{f}$ is the set of functions that generates the value of each variable given its parents. \n\nOur solution for constructing the structural causal equations was to assume that the data was generated by a linear model, ie, the causal relations were linear. For the DAG provided in the code example we derive\n\n$$ v = \\mathcal{b}_v $$\n\n$$ x = \\mathcal{a}_{v \\to x} v + \\mathcal{b}_x $$\n\n$$ w = \\mathcal{a}_{x \\to w} x + \\mathcal{b}_w $$\n\n$$ z = \\mathcal{a}_{v \\to z} v+ \\mathcal{a}_{w \\to z} w + \\mathcal{b}_z $$\n\n$$ s = \\mathcal{a}_{z \\to s} z + \\mathcal{b}_s $$\n\nand that's the tricky thing, as we can see these causal equations are different than the ones that generated the data, but they are the ones that respect the causal system obtained from the obtained DAG. Here $\\mathcal{b}_i$ and $\\mathcal{a}_{i \\to j}$ are the intercept term and the coefficient obtained from the linear regression, respectively. To correctly solve the linear regression respecting the dependencies of the causal graph, we use `topological_sort_by_dfs` from `Graphs.jl`.\n\nNow, with the SCM structure in hand, we see that the representation could be a struct containing the DAG and the coefficients/intercepts of the causal equations, this maps exactly the tuple $(G, \\mathbf{f})$ that we defined. However, since we need these equations to be differentiable, we need to define a function that takes the SCM and returns the value of the variable given its parents and using just the coefficients and the DAG, lead to errors, because `AutoDiff` does not deal well with functions that are conditioned (`if` statements). So, we need to define a way to retrieve the system of causal equations in a smooth way and that's where the `causal_effects` matrix comes to the rescue.\n\nLet the factual vector of features be denoted as:\n\n$$\n\\mathbf{x}_F = \n\\begin{bmatrix}\nx_{F_1} \\\\\nx_{F_2} \\\\\nx_{F_3} \\\\\n\\vdots \\\\\nx_{F_n}\n\\end{bmatrix}\n$$\n\nLet the `causal_effects` matrix be:\n\n$$\n\\mathbf{C} =\n\\begin{bmatrix}\na_{11} & a_{12} & \\cdots & a_{1n} & b_1 \\\\\na_{21} & a_{22} & \\cdots & a_{2n} & b_2 \\\\\na_{31} & a_{32} & \\cdots & a_{3n} & b_3 \\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\na_{n1} & a_{n2} & \\cdots & a_{nn} & b_n \\\\\n\\end{bmatrix}\n$$\n\nHere, $a_{ij}$ represents the coefficient from the causal effect of $x_{F_j}$ on $x_{F_i}$, and $b_i$ represents the intercept term for the variable $x_{F_i}$.\n\nThe matrix multiplication of the `causal_effects` matrix with the factual vector (excluding the bias term) is given by:\n\n$$\n\\mathbf{C}_{:, 1:n} \\cdot \\mathbf{x}_F =\n\\begin{bmatrix}\na_{11} & a_{12} & \\cdots & a_{1n} \\\\\na_{21} & a_{22} & \\cdots & a_{2n} \\\\\na_{31} & a_{32} & \\cdots & a_{3n} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\na_{n1} & a_{n2} & \\cdots & a_{nn}\n\\end{bmatrix}\n\\begin{bmatrix}\nx_{F_1} \\\\\nx_{F_2} \\\\\nx_{F_3} \\\\\n\\vdots \\\\\nx_{F_n}\n\\end{bmatrix}\n$$\n\nFinally, we add the bias term:\n\n$$\n\\mathbf{x}_{SCF} = \\mathbf{C}_{:, 1:n} \\cdot \\mathbf{x}_F + \n\\begin{bmatrix}\nb_1 \\\\\nb_2 \\\\\nb_3 \\\\\n\\vdots \\\\\nb_n\n\\end{bmatrix}\n$$\n\nIn expanded form:\n\n$$\n\\mathbf{x}_{SCF_i} = a_{i1} x_{F_1} + a_{i2} x_{F_2} + \\cdots + a_{in} x_{F_n} + b_i, \\quad \\forall i = 1, 2, \\dots, n\n$$\n\nThis equation shows how each counterfactual variable $x_{SCF_i}$ is generated as a linear combination of the factual inputs $x_{F_j}$ based on the causal effects matrix, with an intercept term $b_i$ added for each variable.\n\nOne can note that the `orphan` nodes, that is, the nodes that do not have parents in the DAG, are going to be equal to the intercept term $\\mathcal{b}_\\hat{o}$. The intuition behind this is that when we do the linear regression, variables that have no causal parents are just equal to the unconditional mean of the variable, i.e, we get $x_{SCF_\\hat{o}} = \\mathbb{E}(x_\\hat{o})$. Because of this, in some cases a better understanding of the regression is needed, so the residuals are also part of the SCM structure,\n\n\n\n::: {#4 .cell execution_count=0}\n``` {.julia .cell-code}\nstruct SCM\n    variables::Vector{String}\n    coefficients::Vector{Vector{Float64}}\n    residuals::Vector{Vector{Float64}}\n    dag::DiGraph\n    causal_effects::Matrix{Float64}\nend\n```\n:::\n\n\n\n\n\n### `CounterfactualExplanations.jl` \n\n\n# Conclusion\n\n<!-- In conclusion, this project has successfully integrated causal reasoning into the CounterfactualExplanations.jl package, providing a valuable tool for generating counterfactual explanations that are not only interpretable but also actionable. -->\n\n# References\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}